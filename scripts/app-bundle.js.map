{"version":3,"sources":["app.ts","environment.ts","main.ts","resources/index.ts","resources/elements/editorfactory.ts","resources/elements/monaco-editor.ts","C:/Github/aurelia-monaco-editor/src/app.html","C:/Github/aurelia-monaco-editor/src/resources/elements/monaco-editor.html"],"names":[],"mappings":";;IAAA;QAAA;YACE,YAAO,GAAG,cAAc,CAAC;QAG3B,CAAC;QAAD,UAAC;IAAD,CAJA,AAIC,IAAA;IAJY,WAAG,MAIf,CAAA;;;;;ICJD;sBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;ICEI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAde,iBAAS,YAcxB,CAAA;;;;;ICvBD,mBAA0B,MAA8B;IAExD,CAAC;IAFe,iBAAS,YAExB,CAAA;;;;;ICED;QAMI;QAQA,CAAC;QAUM,oCAAY,GAAnB,UAAoB,UAAuB,EAAE,OAAmD,EAAE,QAAiD;YAE/I,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,sCAAsC,EAAE,EAAC,CAAC,CAAC;YAC7E,MAAM,CAAC,IAAI,OAAO,CAAsC,UAAC,OAAO,EAAE,MAAM;gBACpE,SAAS,CAAC,CAAC,uBAAuB,CAAC,EAAE,UAAA,CAAC;oBAClC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjE,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;QACN,CAAC;QACL,oBAAC;IAAD,CAjCA,AAiCC,IAAA;IAjCY,qBAAa,gBAiCzB,CAAA;;;;;;;;;;;;;;IClCD;QAUI,sBAAY,OAAgB,EAAE,aAA6B;YAEvD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAC3B,CAAC;QAGM,+BAAQ,GAAf;YAGI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAClG,CAAC;QAnBD;YAAC,4BAAQ;;qDAAA;QAET;YAAC,4BAAQ;;mDAAA;QALb;YAAC,iCAAa,CAAC,eAAe,CAAC;;wBAAA;QAuB/B,mBAAC;IAAD,CAtBA,AAsBC,IAAA;IAtBY,oBAAY,eAsBxB,CAAA;;;AC3BD;ACAA","file":"app-bundle.js","sourcesContent":["export class App {\n  message = 'Hello World!';\n  \n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","\r\n\r\n\r\n\r\n\r\n/**A factory class used to create new monaco editors */\r\nexport class EditorFactory\r\n{        \r\n    \r\n    /**\r\n     * Creates an instance of EditorFactory.\r\n     */\r\n    public constructor()\r\n    {        \r\n        // Map 'vs' to the source code for the monaco editor.\r\n        // This has to be 'vs' as all internal calls to require inside\r\n        // the monaco editor are relative to 'vs'.\r\n        // NOTE: This should probably point to the 'scripts' directory and \r\n        // the monaco editor NPM package should also be copied to the 'scripts'' directory        \r\n        //requirejs.config({ paths: { 'vs': '../node_modules/monaco-editor/dev/vs' }});          \r\n    }\r\n    \r\n    \r\n    /**\r\n     * Creates a new editor       \r\n     * @param {HTMLElement} domElement The {HTMLElement} for which to create the new editor.\r\n     * @param {monaco.editor.IEditorConstructionOptions} [options] The options to create a new editor. \r\n     * @param {monaco.editor.IEditorOverrideServices} [services] \r\n     * @returns {Promise<monaco.editor.IStandaloneCodeEditor>} A promise that returns the new editor.\r\n     */\r\n    public createEditor(domElement: HTMLElement, options? : monaco.editor.IEditorConstructionOptions, services? : monaco.editor.IEditorOverrideServices) : Promise<monaco.editor.IStandaloneCodeEditor>\r\n    {                                        \r\n        requirejs.config({ paths: { 'vs': '../node_modules/monaco-editor/dev/vs' }});\r\n        return new Promise<monaco.editor.IStandaloneCodeEditor>((resolve, reject) => {\r\n            requirejs(['vs/editor/editor.main'], _ => {\r\n                resolve(monaco.editor.create(domElement, options, services));\r\n            })\r\n        })                        \r\n    }\r\n}","import {autoinject, bindable, noView, customElement} from 'aurelia-framework'\r\nimport {EditorFactory} from './editorfactory'\r\n\r\n//@noView\r\n@customElement('monaco-editor')\r\nexport class MonacoEditor\r\n{\r\n    @bindable\r\n    public options : monaco.editor.IEditorConstructionOptions;\r\n    @bindable\r\n    public value : any;\r\n\r\n    private editorFactory : EditorFactory;\r\n    private element : Element;\r\n\r\n    constructor(element: Element, editorFactory : EditorFactory)\r\n    {\r\n        this.editorFactory = editorFactory;\r\n        this.element = element;                \r\n    }\r\n\r\n\r\n    public attached() : Promise<any>\r\n    {                    \r\n        //let options : monaco.editor.IEditorConstructionOptions = {value : this.value, language : 'javascript'}\r\n        return this.editorFactory.createEditor(this.element.children[0] as HTMLElement, this.options);        \r\n    }\r\n}",null,null],"sourceRoot":"..\\src"}